import time
import socket
import pickle
import numpy as np
from pyvicon import pyvicon as pv


IP = "199.98.21.246"
STREAM_MODE = pv.StreamMode.ClientPull #ServerPush is an alternative (lower latency)

# instantiate client
client = pv.PyVicon()

# try to connect to Vicon running on IP
print("Connecting to DataStream",end="")
while not client.is_connected():
    client.connect(IP)
    print(".")
    time.sleep(.25)
print("Connected to DataStream on IP:",IP)

# enable data types
client.enable_segment_data()
client.enable_marker_data()
client.enable_unlabeled_marker_data()
client.enable_device_data()

# set stream mode
print("Setting StreamMode to",str(STREAM_MODE))
client.set_stream_mode(STREAM_MODE)

# set axis mapping for z in upwards direction
client.set_axis_mapping(pv.Direction.Forward,
                        pv.Direction.Left,
                        pv.Direction.Up)
print("Axis Mapping:\n\tX - %s\n\tY - %s\n\tZ - %s" % client.get_axis_mapping())


# start numpy socket to pi
#s = socket.socket()
#s.connect(("10.10.10.10",8123))
#footer = b'XXX'

# Since the STREAM_MODE is ClientPull, this client has to initiate all data transfer.
# We will get "continuous" data by using a while loop to constantly pull data from the Vicon stream.

counter = 0
while True:
    print("",end="")
    while client.get_frame() != pv.Result.Success:
        print(".")

    frame_number = client.get_frame_number()
    frame_rate = client.get_frame_rate()
    latency = client.get_latency_total()
    print("got frame: %s | frame rate: %s Hz | latency: %.4fs." % (frame_number,frame_rate,latency))

    for sub_idx in range(client.get_subject_count()):
        sub_name = client.get_subject_name(sub_idx)
        print("\tSubject %i (%s)"%(sub_idx,sub_name))
        for seg_idx in range(client.get_segment_count(sub_name)):
            seg_name = client.get_segment_name(sub_name,seg_idx)
            print("\t\tSegment %i (%s)"%(seg_idx,seg_name))
            print("\t\t\tGlobal Translation: ",client.get_segment_global_translation(sub_name,seg_name))
            print("\t\t\tGlobal Rotation: ",client.get_segment_global_rotation_matrix(sub_name,seg_name))
            #s.send(pickle.dumps(client.get_segment_global_translation("keyboard","keyboard"),protocol=2)+footer)

    time.sleep(1)
    counter += 1
